(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{431:function(s,n,a){"use strict";a.r(n);var t=a(62),r=Object(t.a)({},(function(){var s=this,n=s.$createElement,a=s._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("p",[s._v("在JavaScript中，经常会通过call / apply / bind 函数来改变this的指向，详情可看"),a("a",{attrs:{href:"https://juejin.cn/post/7122457312186335239",target:"_blank",rel:"noopener noreferrer"}},[s._v("一文带你了解this指向"),a("OutboundLink")],1),s._v("，今天我们来研究下这三个函数的实现。")]),s._v(" "),a("h2",{attrs:{id:"_1-call"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-call"}},[s._v("#")]),s._v(" 1. call")]),s._v(" "),a("p",[s._v("💡call()函数是什么？")]),s._v(" "),a("p",[a("code",[s._v("call()")]),s._v("方法使用一个指定的 this 值和单独给出的一个或多个参数来调用一个函数。也就是说"),a("code",[s._v("call()")]),a("strong",[s._v("改变了this指向并执行了函数")]),s._v("。")]),s._v(" "),a("h3",{attrs:{id:"_1-1-语法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-语法"}},[s._v("#")]),s._v(" 1.1 语法")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("func.call(thisArg, arg1, arg2, ...)\n// thisArg为在 func 函数运行时使用的 this 值\n// arg1, arg2等为指定的参数列表\n// 其返回值为调用有指定 this 值和参数的函数的结果\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("h3",{attrs:{id:"_1-2-流程图"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-流程图"}},[s._v("#")]),s._v(" 1.2 流程图")]),s._v(" "),a("p",[s._v("一般来说，我们要模拟实现"),a("code",[s._v("call")]),s._v(",可以分为以下几个步骤：")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[s._v("    1.  .将函数设置为对象的属性， 当对象为null或undefined, 设为window对象\n    2.  取出函数执行所需参数，执行该函数\n    3.  如果函数存在返回值，在返回后删除该函数\n")])])]),a("p",[s._v("以下就是"),a("code",[s._v("call()")]),s._v("方法实现的流程图：")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8e8c28ef7c3c4347ad3a9876b24141ec~tplv-k3u1fbpfcp-zoom-1.image",alt:""}})]),s._v(" "),a("h3",{attrs:{id:"_1-3-代码实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-代码实现"}},[s._v("#")]),s._v(" 1.3 代码实现")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('Function.prototype.call = function (thisArg, ...argsArray) {\n  if (typeof this !== "function") {\n    throw new TypeError(\n      "Function.prototype.call was called on which is not a function"\n    );\n  }\n\n  if (thisArg === undefined || thisArg === null) {\n    thisArg = window;\n  } else {\n    thisArg = Object(thisArg);\n  }\n\n  // 将 func 放入 thisArg 内，这样在调用 thisArg[func] 时 this 自然就指向了 thisArg\n  const func = Symbol("func");\n  thisArg[func] = this;\n\n  let result;\n\n  if (argsArray.length) {\n    result = thisArg[func](...argsArray);\n  } else {\n    result = thisArg[func]();\n  }\n\n  delete thisArg[func];\n\n  return result;\n};\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br")])]),a("h2",{attrs:{id:"_2-apply"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-apply"}},[s._v("#")]),s._v(" 2. apply")]),s._v(" "),a("p",[s._v("💡apply()函数是什么？")]),s._v(" "),a("p",[a("code",[s._v("apply()")]),s._v("方法调用一个具有给定 this 值的函数，以及以一个数组（或一个类数组对象）的形式提供的参数。同"),a("code",[s._v("call()")]),s._v("的功能，改变this指向的同时执行了函数。")]),s._v(" "),a("h3",{attrs:{id:"_2-1-语法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-语法"}},[s._v("#")]),s._v(" 2.1 语法")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("func.apply(thisArg, [argsArray]);\n// thisArg为在 func 函数运行时使用的 this 值\n// arg1, arg2等为指定的参数列表\n// 其返回值为调用有指定 this 值和参数的函数的结果\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("h3",{attrs:{id:"_2-2-流程图"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-流程图"}},[s._v("#")]),s._v(" 2.2 流程图")]),s._v(" "),a("p",[a("code",[s._v("apply()")]),s._v("方法实现的流程基本与"),a("code",[s._v("call")]),s._v("的实现流程没有太多差异，只需要对函数参数数组进行判断展开即可。")]),s._v(" "),a("p",[s._v("以下是"),a("code",[s._v("apply()")]),s._v("函数的流程图：")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b00771a1c38a42988913a9d9d04e83a7~tplv-k3u1fbpfcp-zoom-1.image",alt:""}})]),s._v(" "),a("h3",{attrs:{id:"_2-3-代码实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-代码实现"}},[s._v("#")]),s._v(" 2.3 代码实现")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('Function.prototype.apply = function (thisArg, argsArray) {\n  if (typeof this !== "function") {\n    throw new TypeError(\n      "Function.prototype.apply was called on which is not a function"\n    );\n  }\n\n  if (thisArg === undefined || thisArg === null) {\n    thisArg = window;\n  } else {\n    thisArg = Object(thisArg);\n  }\n\n  // 将 func 放入 thisArg 内，这样在调用 thisArg[func] 时 this 自然就指向了 thisArg\n  const func = Symbol("func");\n  thisArg[func] = this;\n\n  let result;\n\n  if (argsArray && typeof argsArray === "object" && "length" in argsArray) {\n    // 此处使用 Array.from 包裹让其支持形如 { length: 1, 0: 1 } 这样的类数组对象，直接对 argsArray 展开将会执行出错\n    result = thisArg[func](...Array.from(argsArray));\n  } else if (argsArray === undefined || argsArray === null) {\n    result = thisArg[func]();\n  } else {\n    throw new TypeError("CreateListFromArrayLike called on non-object");\n  }\n\n  delete thisArg[func];\n\n  return result;\n};\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br")])]),a("hr"),s._v(" "),a("h2",{attrs:{id:"_3-bind"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-bind"}},[s._v("#")]),s._v(" 3. bind")]),s._v(" "),a("p",[s._v("💡bind() 函数是什么？")]),s._v(" "),a("p",[a("code",[s._v("bind()")]),s._v("方法创建一个新的函数，在"),a("code",[s._v("bind()")]),s._v(" 被调用时，这个新函数的"),a("code",[s._v("this")]),s._v("被指定为 "),a("code",[s._v("bind()")]),s._v("的第一个参数，而其余参数将作为新函数的参数，供调用时使用。")]),s._v(" "),a("h3",{attrs:{id:"_3-1-语法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-语法"}},[s._v("#")]),s._v(" 3.1 语法")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("func.bind(thisArg[, arg1[, arg2[, ...]]])\n// thisArg 为调用绑定函数时作为 this 参数传递给目标函数的值， 如果使用 new 运算符构造绑定函数，忽略该值\n// arg1, arg2为当目标函数被调用时，被预置入绑定函数的参数列表中的参数。\n// 其返回值为一个原函数的拷贝，并拥有指定的 this 值和初始参数\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("h3",{attrs:{id:"_3-2-流程图"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-流程图"}},[s._v("#")]),s._v(" 3.2 流程图")]),s._v(" "),a("p",[s._v("想要实现"),a("code",[s._v("bind")]),s._v("函数，即需实现两个特点：一为返回一个函数；二为可以传入参数。所以我们可从以下几点入手：")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[s._v("    1.  通过使用`call`或者`apply`实现 `this`的指定；\n    2.  实现在`bind`的时候可以传参，在执行返回函数时传参；\n    3.  判断是否使用 `new`操作符来确定`this`指向。\n")])])]),a("p",[s._v("话不多说，下面就是"),a("code",[s._v("bind")]),s._v("函数的流程图：")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c3c338d7c9614868b74eeda885b71cd3~tplv-k3u1fbpfcp-zoom-1.image",alt:""}})]),s._v(" "),a("h3",{attrs:{id:"_3-3-代码实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-代码实现"}},[s._v("#")]),s._v(" 3.3 代码实现")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('Function.prototype.bind = function (thisArg, ...argsArray) {\n  if (typeof this !== "function") {\n    throw new TypeError(\n      "Function.prototype.bind was called on which is not a function"\n    );\n  }\n\n  if (thisArg === undefined || thisArg === null) {\n    thisArg = window;\n  } else {\n    thisArg = Object(thisArg);\n  }\n\n  const func = this;\n\n  const bound = function (...boundArgsArray) {\n    let isNew = false;\n\n    // 如果 func 不是构造器，直接使用 instanceof 将出错，所以需要用 try...catch 包裹\n    try {\n      isNew = this instanceof func;\n    } catch (error) {}\n\n    return func.apply(isNew ? this : thisArg, argsArray.concat(boundArgsArray));\n  };\n\n  const Empty = function () {};\n  Empty.prototype = this.prototype;\n  bound.prototype = new Empty();\n\n  return bound;\n};\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br")])]),a("h2",{attrs:{id:"_4-全文总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-全文总结"}},[s._v("#")]),s._v(" 4.全文总结")]),s._v(" "),a("h4",{attrs:{id:"call、apply与bind有什么区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#call、apply与bind有什么区别"}},[s._v("#")]),s._v(" call、apply与bind有什么区别？")]),s._v(" "),a("ol",[a("li",[s._v("calll、apply 与 bind 都用于"),a("code",[s._v("this")]),s._v("绑定，但 call、apply 函数在改变this指向的同时还会执行函数；而 bind 函数在改变this后返回一个全新的绑定函数。")]),s._v(" "),a("li",[s._v("bind 属于硬绑定，返回的绑定函数的this指向不能再通过 bind、apply 或 call 修改，即"),a("code",[s._v("this")]),s._v("被永久绑定；call 与 apply 只适用于当前调用，一次调用后就结束。")]),s._v(" "),a("li",[s._v("call 和 apply 功能完全相同，但call 从第二个参数后的所有参数都是原函数的参数；而 apply 只接受两个参数，第二个参数必须是数组，该数组包含着原函数的参数列表。")])]),s._v(" "),a("p",[s._v("本文就写到这里啦！谢谢大家的阅读！❤❤")])])}),[],!1,null,null,null);n.default=r.exports}}]);