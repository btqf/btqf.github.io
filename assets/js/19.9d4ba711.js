(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{436:function(s,n,e){"use strict";e.r(n);var a=e(62),t=Object(a.a)({},(function(){var s=this,n=s.$createElement,e=s._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("p",[s._v("JavaScript发展到现在，异步编程已经得到了极大的改进。异步编程的进化史：callback -> promise -> generator -> async + await。现在我们来根据其发展历史一一进行分析。")]),s._v(" "),e("h2",{attrs:{id:"callback"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#callback"}},[s._v("#")]),s._v(" callback")]),s._v(" "),e("p",[s._v("在早期的JavaScript中，只支持定义回调函数来表明异步操作完成，它也是异步操作中最基本的一种方法。在这里我们需要知道，回调函数就是将函数作为变量看待，即在一个函数里将变量设置为函数，"),e("strong",[s._v("它不一定是异步代码，异步代码却一定是回调函数")]),s._v(" 。以下就是一个回调函数的例子：")]),s._v(" "),e("div",{staticClass:"language-fs line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("function test(value, callback) {\n    setTimeout(() => callback(value),1000)\n}\n\ntest(3, (x) => console.log(`测试数据为: ${x}`))\n// 测试数据为: 3  (大约在1000ms后）\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br")])]),e("p",[s._v("上述方式可以完成了一个回调操作，但是如果异步返回值依赖于另一个异步返回值，结果又会怎样呢？让我们看看接下来的一个例子：")]),s._v(" "),e("div",{staticClass:"language-fs line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("function test(value, success, failure) {\n    setTimeout(() => {\n        try {\n            if (typeof value !== 'number') {\n                throw 'please provide number as first argument'\n            } \n            success(3*value)   // 成功回调\n        } catch(e) {\n            failure(e)   // 失败回调\n        }\n    },1000)\n}\n\nconst successCallback = (x) => {\n    test(x, (y) => console.log(`suceess: ${y}`))\n}\n\nconst failureCallback = (e) => {\n    console.log(`failure:${e}`)\n}\n\ntest(3, successCallback, failureCallback)    // suceess: 27(大约100ms之后)\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br")])]),e("p",[s._v("很显然，随着代码越复杂，回调策略就难以扩展，嵌套回调的代码也就难以维护，这就是著名的“"),e("strong",[s._v("回调地狱")]),s._v("”。")]),s._v(" "),e("h2",{attrs:{id:"promise"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#promise"}},[s._v("#")]),s._v(" Promise")]),s._v(" "),e("p",[s._v("什么是Promise?")]),s._v(" "),e("p",[e("strong",[s._v("Promise")]),s._v(" 是一个由异步函数返回的可以向我们指示当前操作所处的状态的对象。在"),e("strong",[s._v("Promise")]),s._v("返回给调用者时，操作往往还没有完成，但 Promise 对象可以让我们操作最终完成时对其进行处理（无论成功还是失败）。")]),s._v(" "),e("p",[s._v("正如前面所述，Promises是一个有状态的对象，它可能处于以下三种状态：")]),s._v(" "),e("ul",[e("li",[e("ul",[e("li",[s._v("待定（pending）：初始状态，既没有被兑现，也没有被拒绝。这是调用 "),e("code",[s._v("fetch()")]),s._v("返回Promise的状态，此时请求还在进行中。")]),s._v(" "),e("li",[s._v("兑现（fullfilled）：操作成功完成，然后调用"),e("code",[s._v("then()")]),s._v("处理函数。")]),s._v(" "),e("li",[s._v("拒绝（rejected）：操作失败，然后调用"),e("code",[s._v("catch()")]),s._v("处理函数。")])])])]),s._v(" "),e("p",[e("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5792eaef23d84fc49b47e8f2f86c8f54~tplv-k3u1fbpfcp-zoom-1.image",alt:""}})]),s._v(" "),e("p",[s._v("依图所示，我们知道无论落定为哪种状态都是不可逆的，只要从pending转换为fullfilled/rejected，期约的状态就不再改变。同时，我们应该了解到，"),e("strong",[s._v("期约的状态是私有的，为了避免根据读取到的期约状态以同步方式处理Promise,它不能直接通过JavaScript检测到")]),s._v("。")]),s._v(" "),e("p",[s._v("因为期约状态私有，所以只能在期约的执行器函数中进行内部操作。执行器函数主要有两个职责：初始化期约的异步行为和控制状态的最终转换。而一般来说切换期约状态是通过调用它的两个函数参数实现，该两个函数参数通常命名为resolve()和reject()。")]),s._v(" "),e("div",{staticClass:"language-fs line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("let p1 = new Promise((resolve,reject) => resolve())\nsetTimeout(console.log,0,p1)  // Promise <resolved>\n\nlet p2 = new Promise((resolve, reject) => reject())\nsetTimeout(console.log,0,p2)  // Promise <rejected>\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("p",[s._v("好了，说了这么多，让我们通过一个例子来详细探讨下。在以下例子中，我们通过发送一个请求，获得一个JSON文件：")]),s._v(" "),e("div",{staticClass:"language-fs line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('const fetchPromise = fetch(\'https://mdn.github.io/learning-area/javascript/apis/fetching-data/can-store/products.json\');\n\nconsole.log(fetchPromise);  // Promise { <state>: "pending" }\n\nfetchPromise\n  .then( response => {\n    if (!response.ok) {\n      throw new Error(`HTTP error: ${response.status}`);\n    } else {\n      console.log(`已收到响应：${response.status}`);\n    }\n    return response.json();  // 获取JSON格式的数据\n  })\n  .then( json => {\n    console.log(json[0].name);\n  });\n\nconsole.log("已发送请求……");\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br")])]),e("p",[s._v("在上述代码中，通过调用"),e("code",[s._v("fetch()")]),s._v("API将返回值赋予变量"),e("code",[s._v("fetchPromise")]),s._v("，然后将"),e("code",[s._v("json()")]),s._v("这个处理函数传递给Promise的"),e("code",[s._v("then()")]),s._v("方法进行调用。因为"),e("code",[s._v("json()")]),s._v("方法也是异步，我们必须连续调用两个异步函数。我们将一个新的"),e("code",[s._v("then()")]),s._v("处理程序传递"),e("code",[s._v("response.json()")]),s._v("返回的Promise。此处采用链式调用，从而能够避免了回调嵌套而导致的"),e("strong",[s._v("回调地域")]),s._v("问题。")]),s._v(" "),e("p",[s._v("以下为完整的输出结果：")]),s._v(" "),e("div",{staticClass:"language-fs line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('Promise { <state>: "pending" }\n\n已发送请求……\n\n已收到响应：200\n\nbaked beans\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br")])]),e("p",[s._v("可以看出，"),e("code",[s._v("已发送请求……")]),s._v("的消息在我们收到响应前就已被输出，即"),e("code",[s._v("fetch()")]),s._v("在请求进行时返回，这使得程序保持响应性。")]),s._v(" "),e("p",[s._v("在Promise中，有着几个常用的API，分别是"),e("code",[s._v("Promise.all()")]),s._v("和 "),e("code",[s._v("Promise.race()")]),s._v(",大家可以去详细了解下，这里就不阐述了。")]),s._v(" "),e("h2",{attrs:{id:"generator"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#generator"}},[s._v("#")]),s._v(" generator")]),s._v(" "),e("p",[s._v("generator即生成器，它拥有在一个函数块内暂停和恢复代码执行的能力。")]),s._v(" "),e("h3",{attrs:{id:"_1-生成器基础"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-生成器基础"}},[s._v("#")]),s._v(" 1.生成器基础")]),s._v(" "),e("p",[s._v("generator的形式就是一个函数，函数名称前面加一个星号（*）表明该为一个生成器，所以"),e("strong",[s._v("箭头函数不能被用来定义generator函数")]),s._v("。当我们调用生成器函数时会产生一个生成器对象，生成器对象一开始处于暂停执行（suspended）的状态。当调用next()方法时，生成器开始或恢复执行，同时返回一个done属性和value属性。如下例可见：")]),s._v(" "),e("div",{staticClass:"language-fs line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("function* generatorFn() {\n    return 'success';\n}\n\nlet generatorObject = generatorFn()\nconsole.log(generatorObject)   // generatorFn{<suspended>}\nconsole.log(generatorObject.next())  // { value: 'success', done: true }\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br")])]),e("h3",{attrs:{id:"_2-yield中断执行"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-yield中断执行"}},[s._v("#")]),s._v(" 2.yield中断执行")]),s._v(" "),e("p",[s._v("yield关键字可以让生成器停止和开始执行。")]),s._v(" "),e("p",[s._v("生成器函数在遇到yield关键字前正常执行，遇到该关键字后执行停止，但函数作用域的状态会被保留。停止执行的生成器函数只能通过调用生成器对象的next()方法来恢复执行。yield关键字退出的generator函数处在done:false状态；return关键字退出的生成器函数处于done:true状态。")]),s._v(" "),e("div",{staticClass:"language-fs line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("function* generatorFn() {\n    yield 'foo';\n    yield 'bar';\n    return 'baz';\n}\n\nlet generatorObject = generatorFn()\nconsole.log(generatorObject.next())   // { value: 'foo', done: false }\nconsole.log(generatorObject.next())   // { value: 'bar', done: false }\nconsole.log(generatorObject.next())   // { value: 'baz', done: true }\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br")])]),e("p",[s._v("同时，yield关键字可以作为函数的中间参数使用，"),e("strong",[s._v("该参数就会被当作上一个yield表达式的返回值，")]),s._v(" 但值得注意的是"),e("strong",[s._v("第一次调用next()传入的值不会被使用，因为这一次调用时为了开始执行generator函数")]),s._v("。")]),s._v(" "),e("div",{staticClass:"language-fs line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("function *foo(x) {\n  let y = 2 * (yield (x + 1))\n  let z = yield (y / 3)\n  return (x + y + z)\n}\nlet it = foo(5)\nconsole.log(it.next())   // => {value: 6, done: false}\nconsole.log(it.next(12)) // => {value: 8, done: false}\nconsole.log(it.next(13)) // => {value: 42, done: true}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br")])]),e("p",[s._v("可能结果跟你想象不一致，接下来我们逐行代码分析：")]),s._v(" "),e("ul",[e("li",[e("ul",[e("li",[s._v("当执行第一次 next 时，传参会被忽略，并且函数暂停在 yield (x + 1) 处，所以返回 5 + 1 = 6")]),s._v(" "),e("li",[s._v("当执行第二次 next 时，传入的参数12就会被当作上一个yield表达式的返回值，如果你不传参，yield 永远返回 undefined。此时 let y = 2 * 12，所以第二个 yield 等于 2 * 12 / 3 = 8")]),s._v(" "),e("li",[s._v("当执行第三次 next 时，传入的参数13就会被当作上一个yield表达式的返回值，所以 z = 13, x = 5, y = 24，相加等于 42。")])])])]),s._v(" "),e("h2",{attrs:{id:"async-await"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#async-await"}},[s._v("#")]),s._v(" async/await")]),s._v(" "),e("p",[s._v("在学习异步函数"),e("code",[s._v("async/await")]),s._v("前，让我们先来看一个例子：")]),s._v(" "),e("p",[e("code",[s._v("let p = new Promise((resolve, reject) => setTimeout(resolve,1000,2));")])]),s._v(" "),e("p",[s._v("这个期约在1000ms后解决为数值3，如果我们想要访问它，则必须写一个解决处理程序：")]),s._v(" "),e("p",[e("code",[s._v("p.then((x) => console.log(x);")])]),s._v(" "),e("p",[s._v("这样极其不方便，"),e("strong",[s._v("任何需要访问该期约产生值的代码都需要以处理程序的形式来接收这个值")]),s._v("。为了解决这样的问题，ECMAScript提供了"),e("code",[s._v("async/await")]),s._v("关键字。")]),s._v(" "),e("h3",{attrs:{id:"_1-async"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-async"}},[s._v("#")]),s._v(" 1.async")]),s._v(" "),e("p",[s._v("async关键字用于声明异步函数，它可以用在"),e("strong",[s._v("函数声明、函数表达式、箭头函数和方法")]),s._v("上。当异步函数中使用return关键字返回值（没有return则返回undefind）时，这个值会被"),e("code",[s._v("Promise.resolve()")]),s._v("包装成一个Promise对象，然后交由then()的处理程序进行‘解包’。同时，当在异步函数中抛出错误时，会返回一个拒绝期约，但拒绝期约的错误无法被函数捕获。")]),s._v(" "),e("div",{staticClass:"language-fs line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("async function foo() {\n  console.log(1);\n  return 5;\n}\n\nasync function qux() {\n  console.log(2)\n  throw 6;\n}\n\nasync function baz() {\n  console.log(3);\n  Promise.reject(7);\n}\n\nfoo().then(console.log);\nqux().catch(console.log);\nbaz().catch(console.log);\nconsole.log(4);\n\n// 输出结果顺序为：1  2  3  4  5  6  Uncaught (in promise):7\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br")])]),e("p",[s._v("相信大家看了上面的例子都了解，async关键字就是一个标识符，其执行基本上与普通函数没什么区别。所以这个时候就需要await的"),e("strong",[s._v("暂停和恢复执行")]),s._v("的能力了。")]),s._v(" "),e("h3",{attrs:{id:"_2-await"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-await"}},[s._v("#")]),s._v(" 2.await")]),s._v(" "),e("p",[s._v("await关键字能暂停异步函数后面的代码，记录在哪里暂停，让出JavaScript运行时的执行线程；然后尝试‘"),e("strong",[s._v("解包")]),s._v("’对象，等到await右边的值可用，JavaScript运行时就会向消息队列中推送一个任务，这个任务就会恢复异步函数的执行。")]),s._v(" "),e("p",[s._v("下面来看个例子：")]),s._v(" "),e("div",{staticClass:"language-fs line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("async function foo() {\n  console.log(1);\n  console.log(await Promise.resolve(5));  \n  console.log(6);\n}\n\nasync function qux() {\n  console.log(2)\n  await (() => {throw 7})();\n}\n\nasync function baz() {\n  console.log(3);\n  await Promise.reject(8);\n  console.log(9);   // 该行代码不会执行\n}\n\nfoo().then(console.log);\nqux().catch(console.log);\nbaz().catch(console.log);\nconsole.log(4);\n\n// 输出结果顺序为：1  2  3  4  5  6  7  8\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br")])]),e("p",[s._v("值得注意一点的是，单独的"),e("code",[s._v("Promise.reject()")]),s._v("不会被异步函数捕捉，而在上述的"),e("code",[s._v("baz()")]),s._v("函数中，对拒绝期约使用await会释放错误值。同时，我们必须明确的一点是，"),e("strong",[s._v("await关键字必须在异步函数中使用，不能在顶级上下文（如"),e("code",[s._v("<script>")]),s._v("标签）或模块中使用，它的特质也不会扩展到嵌套函数。")])])])}),[],!1,null,null,null);n.default=t.exports}}]);