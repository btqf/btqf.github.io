(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{438:function(s,n,e){"use strict";e.r(n);var a=e(62),t=Object(a.a)({},(function(){var s=this,n=s.$createElement,e=s._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("p",[s._v("JavaScript 语言诞生至今，模块规范化之路曲曲折折。社区先后出现了各种解决方案，包括 AMD、CMD、CommonJS 等，而后ES6又引入了模块规范。")]),s._v(" "),e("p",[s._v("今天我们就来探究一下，为什么会引入这些模块规范，这些模块规范分别做了什么？")]),s._v(" "),e("h2",{attrs:{id:"_1-es6之前的模块加载"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-es6之前的模块加载"}},[s._v("#")]),s._v(" 1. ES6之前的模块加载")]),s._v(" "),e("p",[s._v("在ES6原生支持模块前，使用模块的"),e("code",[s._v("JavaScript")]),s._v("代码本质上是希望使用默认没有的语言特性。因此，需要采用特定的模板语法编写代码以及单独的模块工具将模板语法和"),e("code",[s._v("JavaScript")]),s._v("运行时连接起来。")]),s._v(" "),e("h3",{attrs:{id:"_1-1-服务器端-commonjs"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-服务器端-commonjs"}},[s._v("#")]),s._v(" 1.1 服务器端 - CommonJS")]),s._v(" "),e("p",[e("code",[s._v("CommonJS")]),s._v("规范概述了同步声明依赖的模块定义，只有加载模块完成，才能执行后面的操作。该规范通常用于在服务器端实现模块化代码。")]),s._v(" "),e("h4",{attrs:{id:"_1-1-1-commonjs-module的加载原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-1-commonjs-module的加载原理"}},[s._v("#")]),s._v(" 1.1.1 "),e("code",[s._v("CommonJS module")]),s._v("的加载原理")]),s._v(" "),e("p",[e("code",[s._v("CommonJS")]),s._v("模块是一个脚本文件，当我们用"),e("code",[s._v("require")]),s._v("命令第一次加载该脚本时就会执行整个脚本，然后在内存中生成该模块的一个说明对象。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("{\n    id: '',  //模块id，唯一\n    exports: {  //模块输出的各个接口\n        ...\n    },\n    loaded: true,  //模块的脚本是否执行完毕\n    ...\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br")])]),e("p",[s._v("当我们以后用到该模块时，就会到对象的"),e("code",[s._v("exports")]),s._v("属性中取值，"),e("strong",[s._v("即使我们再次执行")]),e("code",[s._v("require")]),e("strong",[s._v("命令，也不会再次执行该模块，而是到缓存中取值。")]),s._v(" 同时，因为"),e("code",[s._v("CommonJs")]),s._v("是加载时执行，"),e("strong",[s._v("一旦某个模块被“循环加载”，就只会输出已经执行的部分，没有执行的部分不会输出。")])]),s._v(" "),e("p",[s._v("让我们来看看"),e("code",[s._v("Node.js")]),s._v("官方给出的例子：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("//a.js\nexports.done = false;\n\nvar b = require('./b.js');\nconsole.log('在a.js中，b.done = %j', b.done);\n\nexports.done = true;\nconsole.log('a.js执行完毕！')\n\n//b.js\nexports.done = false;\n\nvar a = require('./a.js');\nconsole.log('在b.js中，a.done = %j', a.done);\n\nexports.done = true;\nconsole.log('b.js执行完毕！')\n\n//main.js\nvar a = require('./a.js');\nvar b = require('./b.js');\n\nconsole.log('在main.js中，a.done = %j, b.done = %j', a.done, b.done);\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br")])]),e("p",[s._v("当我们运行"),e("code",[s._v("main.js")]),s._v("时，运行结果如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("在b.js中，a.done = false\nb.js执行完毕！\n在a.js中，b.done = true\na.js执行完毕！\n在main.js中，a.done = true, b.done = true\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("p",[s._v("由上述的运行结果可知：")]),s._v(" "),e("ol",[e("li",[s._v("当我们在首次加载"),e("code",[s._v("b.js")]),s._v("时，"),e("code",[s._v("a.js")]),s._v("并没有执行完毕，只执行了第一行，所以在循环加载中只输出了已执行的部分"),e("code",[s._v("a.done=false")]),s._v(".")]),s._v(" "),e("li",[e("code",[s._v("main.js")]),s._v("第二行不会再次执行，而是输出缓存"),e("code",[s._v("b.js")]),s._v("的执行结果"),e("code",[s._v("b.done=true")]),s._v(".")])]),s._v(" "),e("h4",{attrs:{id:"_1-1-2-modult-exports-和-exports-的区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-2-modult-exports-和-exports-的区别"}},[s._v("#")]),s._v(" 1.1.2 "),e("code",[s._v("modult.exports 和 exports 的区别")])]),s._v(" "),e("p",[s._v("在"),e("code",[s._v("node")]),s._v("代码中，有的地方使用"),e("code",[s._v("module.exports")]),s._v("，有的地方使用"),e("code",[s._v("exports")]),s._v("，这两个有什么区别吗？让我们来看看下述的代码：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("var module = {\n  exports: {}\n}\nvar exports = module.exports;\nconsole.log(module.exports === exports); // true\n\nvar s = 'btqf'\nexports = s; // module.exports 不受影响\nconsole.log(module.exports === exports); // false\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br")])]),e("p",[s._v("由运行结果来看，当我们对模块进行初始化时，"),e("code",[s._v("exports")]),s._v("和"),e("code",[s._v("module.exports")]),s._v("指向同一块内存，"),e("code",[s._v("exports")]),s._v("被重新赋值后，就切断了与原内存地址的联系。所以当一个模块的对外接口为一个单一值，不能使用"),e("code",[s._v("exports")]),s._v("输出，而只能使用"),e("code",[s._v("module.exports")]),s._v("进行输出。")]),s._v(" "),e("h3",{attrs:{id:"_1-2-浏览器端-amd-cmd"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-浏览器端-amd-cmd"}},[s._v("#")]),s._v(" 1.2 浏览器端 - AMD/CMD")]),s._v(" "),e("h4",{attrs:{id:"_1-2-1-amd"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-1-amd"}},[s._v("#")]),s._v(" 1.2.1 AMD")]),s._v(" "),e("p",[s._v("异步模块定义规范（AMD）以浏览器为目标执行环境，模块和模块的依赖可以被异步加载（浏览器同步加载模块会导致性能、可用性、调试和跨域访问等问题）")]),s._v(" "),e("p",[s._v("AMD模块实现的核心是用函数包装模块定义，这样可以防止声明全局变量，并允许加载器库控制何时加载代码。同时，包装模块的函数时全局"),e("code",[s._v("define")]),s._v("的参数。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("// ID为'moduleA'的模块定义， moduleA依赖moduleB\n// moduleB会异步加载\ndefine('moduleA', ['moduleB'], function(moduleB) {\n  return {\n    stuff: moduleB.doStuff();\n  }\n})\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br")])]),e("h4",{attrs:{id:"_1-2-2-cmd"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-2-cmd"}},[s._v("#")]),s._v(" 1.2.2 CMD")]),s._v(" "),e("p",[s._v("CMD和AMD一样，都是JS的模块化规范，也主要用于浏览器端。两者的主要区别在于CMD偏向依赖靠近，AMD偏向依赖前置。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("// AMD\n// 依赖必须一开始就写好\ndefine(['./utils'], function(utils) {\n  utils.request();\n});\n\n// CMD\ndefine(function(require) {\n  // 依赖可以就近书写\n  var utils = require('./utils');\n  utils.request();\n});\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br")])]),e("p",[s._v("考虑到目前主流中对AMD和CMD的使用越来越少，大家对AMD和CMD有了大致的认识即可，此处不再过多赘述。")]),s._v(" "),e("h3",{attrs:{id:"_1-3-umd"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-umd"}},[s._v("#")]),s._v(" 1.3 UMD")]),s._v(" "),e("p",[s._v("为了统一"),e("code",[s._v("CommonJS")]),s._v("和"),e("code",[s._v("AMD")]),s._v("生态系统，"),e("code",[s._v("UMD")]),s._v("闪亮登场。"),e("code",[s._v("UMD")]),s._v("定义的模块会在启动时检测要使用哪一个模块系统，然后进行适当配置，并把所有逻辑包装在一个立即调用的函数表达式中。"),e("strong",[s._v("其解决了JS模块跨模块规范、跨平台使用的问题。")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("!function (root, factory) {\n  if (typeof exports === 'object' && typeof module === 'object') {\n    // CommonJS2\n    module.exports = factory()\n    // define.amd 用来判断项目是否应用 require.js\n  } else if (typeof define === 'function' && define.amd) {\n    // AMD\n    define([], factory)\n  } else if (typeof exports === 'object') {\n    // CommonJS\n    exports.myLibName = factory()\n  } else {\n    // 全局变量\n    root.myLibName = factory()\n  }\n}(window, function () {\n  // 模块初始化要执行的代码\n});\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br")])]),e("p",[s._v("\\")]),s._v(" "),e("h2",{attrs:{id:"_2-es6模块加载"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-es6模块加载"}},[s._v("#")]),s._v(" 2. ES6模块加载")]),s._v(" "),e("p",[e("code",[s._v("ES6 module")]),s._v("旨在为浏览器和服务器提供通用的模块解决方案。但在目前来说，无论在浏览器端还是服务器端，都还没有完全支持"),e("code",[s._v("ES6 module")]),s._v("，如果要想使用可以借助"),e("code",[s._v("babel")]),s._v("等编译器。")]),s._v(" "),e("p",[s._v("ES6 module 在处理以上几种导入模块接口的方式时都是编译时处理，所以"),e("code",[s._v("import")]),s._v("和"),e("code",[s._v("export")]),s._v("命令只能用在模块的顶层。")]),s._v(" "),e("h3",{attrs:{id:"_2-1-导出"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-导出"}},[s._v("#")]),s._v(" 2.1 导出")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("// 方式一\nexport const prefix = 'https://github.com';\n\n// 方式二\nconst foo = 'btqf';\nconst bar = 'bar'\nexport { foo, bar as myBar }\n\n// 方式三: 默认导出\nexport default function foo() {}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br")])]),e("h3",{attrs:{id:"_2-2-导入"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-导入"}},[s._v("#")]),s._v(" 2.2 导入")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("// 方式一：配合`import`使用的`as`关键字用来为导入的接口重命名。\nimport { api as myApi } from './config.js';\n\n// 方式二：整体导入\nimport * as config from './config.js';\nconst api = config.api;\n\n// 方式三：默认导出的导入\n// foo.js\nexport const conut = 0;\nexport default function myFoo() {}\n// index.js\nimport { default as cusFoo, count } from './foo.js';\n\n// 方式四：整体加载\nimport './config.js';\n\n// 方式五：动态加载\nfunction foo() {\n  import('./config.js')\n    .then(({ api }) => {});\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br")])]),e("p",[s._v("\\")]),s._v(" "),e("h2",{attrs:{id:"_3-commonjs-module-和-es6-module-的区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-commonjs-module-和-es6-module-的区别"}},[s._v("#")]),s._v(" 3. CommonJS module 和 ES6 module 的区别")]),s._v(" "),e("ul",[e("li",[s._v("为"),e("code",[s._v("CommonJS")]),s._v("的require语法是同步的，所以就导致了"),e("code",[s._v("CommonJS")]),s._v("模块规范只适合用在服务端，而ES6模块无论是在浏览器端还是服务端都是可以使用的，但是在服务端中，还需要遵循一些特殊的规则才能使用 ；")]),s._v(" "),e("li",[e("code",[s._v("CommonJS")]),s._v(" "),e("strong",[s._v("模块输出的是一个值的拷贝，而ES6 模块输出的是值的引用")]),s._v("；")]),s._v(" "),e("li",[e("code",[s._v("CommonJS")]),s._v(" "),e("strong",[s._v("模块是运行时加载，而ES6 模块是编译时输出接口")]),s._v("，使得对JS的模块进行静态分析成为了可能")]),s._v(" "),e("li",[s._v("因为两个模块加载机制的不同，所以在对待循环加载的时候，它们会有不同的表现。"),e("code",[s._v("CommonJS")]),s._v("遇到循环依赖的时候，只会输出已经执行的部分，后续的输出或者变化，是不会影响已经输出的变量。而ES6模块相反，使用import加载一个变量，变量不会被缓存，真正取值的时候就能取到最终的值；")]),s._v(" "),e("li",[s._v("关于模块顶层的this指向问题，在"),e("code",[s._v("CommonJS")]),s._v("顶层，this指向当前模块；而在ES6模块中，this指向undefined；")]),s._v(" "),e("li",[s._v("关于两个模块互相引用的问题，在ES6模块当中，是支持加载"),e("code",[s._v("CommonJS")]),s._v("模块的。但是反过来，"),e("code",[s._v("CommonJS")]),s._v("并不能requireES6模块，在NodeJS中，两种模块方案是分开处理的。")])])])}),[],!1,null,null,null);n.default=t.exports}}]);