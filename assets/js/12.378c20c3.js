(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{429:function(t,n,e){"use strict";e.r(n);var a=e(62),s=Object(a.a)({},(function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"数据类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数据类型"}},[t._v("#")]),t._v(" 数据类型")]),t._v(" "),e("p",[t._v("💡Tips: 在数据类型中，值得注意的是要"),e("code",[t._v("Null与Undefined的区分")]),t._v("以及"),e("code",[t._v("Number与BigInt的差别")]),t._v("。")]),t._v(" "),e("p",[t._v("JavaScript 语言中类型集合由"),e("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Data_structures#%E5%8E%9F%E5%A7%8B%E5%80%BC",target:"_blank",rel:"noopener noreferrer"}},[t._v("原始值"),e("OutboundLink")],1),t._v("和"),e("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Data_structures#%E5%AF%B9%E8%B1%A1",target:"_blank",rel:"noopener noreferrer"}},[t._v("对象"),e("OutboundLink")],1),t._v("组成。其中原始值有Undefined、Null、Boolean、String、Number、BigInt（es6新增）、Symbol(es6新增）；对象有Object。")]),t._v(" "),e("p",[t._v("本文在这里就不再详细叙述，具体可请看"),e("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures",target:"_blank",rel:"noopener noreferrer"}},[t._v("JavaScript数据类型与数据结构"),e("OutboundLink")],1),t._v("。而如果想要深入了解JavaScript的变量在内存中的具体存储形式，可以参考"),e("a",{attrs:{href:"https://juejin.cn/post/6844903873992196110",target:"_blank",rel:"noopener noreferrer"}},[t._v("JS中的栈内存堆内存"),e("OutboundLink")],1),t._v("。")]),t._v(" "),e("p",[t._v("接下来让我们看看JavaScript中的类型判断。")]),t._v(" "),e("h2",{attrs:{id:"类型判断"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#类型判断"}},[t._v("#")]),t._v(" 类型判断")]),t._v(" "),e("p",[t._v("💡Tips: 通常的类型判断中，有typeof、instanceof、constructor、Object.prototype.toString.call()、Array.isArray()等方法，本文只讲述其中三种。")]),t._v(" "),e("h3",{attrs:{id:"typeof"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#typeof"}},[t._v("#")]),t._v(" typeof")]),t._v(" "),e("p",[e("code",[t._v("typeof")]),t._v(" "),e("em",[e("strong",[t._v("操作符返回一个字符串，表示未经计算的操作数的类型。一般来说，数组、对象、null 都会被判断为object，其余判断正确")])]),t._v("。")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[e("strong",[t._v("类型")])]),t._v(" "),e("th",[e("strong",[t._v("结果")])])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("undefined")]),t._v(" "),e("td",[t._v('"undefined"')])]),t._v(" "),e("tr",[e("td",[t._v("Boolean")]),t._v(" "),e("td",[t._v('"boolean"')])]),t._v(" "),e("tr",[e("td",[t._v("Number/NaN")]),t._v(" "),e("td",[t._v('"number"')])]),t._v(" "),e("tr",[e("td",[t._v("BigInt")]),t._v(" "),e("td",[t._v('"bigInt"')])]),t._v(" "),e("tr",[e("td",[t._v("String")]),t._v(" "),e("td",[t._v('"string"')])]),t._v(" "),e("tr",[e("td",[t._v("Function")]),t._v(" "),e("td",[t._v('"function"')])]),t._v(" "),e("tr",[e("td",[t._v("其他任何对象/ Null")]),t._v(" "),e("td",[t._v('"object"')])])])]),t._v(" "),e("h3",{attrs:{id:"instanceof"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#instanceof"}},[t._v("#")]),t._v(" instanceof")]),t._v(" "),e("p",[e("code",[t._v("instanceof")]),t._v(" 运算符用于检测构造函数的 "),e("code",[t._v("prototype")]),t._v(" 属性是否出现在某个实例对象的原型链上,"),e("strong",[t._v("它主要用来判别引用数据类型，不能用于判断基本数据类型")]),t._v("。")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("function Car(make, model, year) {\n  this.make = make;\n  this.model = model;\n  this.year = year;\n}\nfunction Plane(){}\n\nconst auto = new Car('Honda', 'Accord', 1998);\n\nconsole.log(auto instanceof Car);     // true\nconsole.log(auto instanceof Object);  // true\nconsole.log(auto instanceof Plane);   // false\n\n// 当改变实例对象的原型链时，员表达式的值可能会改变\nCar.prototype = {}\nconsole.log(auto instanceof Car)      // false\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br"),e("span",{staticClass:"line-number"},[t._v("12")]),e("br"),e("span",{staticClass:"line-number"},[t._v("13")]),e("br"),e("span",{staticClass:"line-number"},[t._v("14")]),e("br"),e("span",{staticClass:"line-number"},[t._v("15")]),e("br"),e("span",{staticClass:"line-number"},[t._v("16")]),e("br")])]),e("h4",{attrs:{id:"instanceof原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#instanceof原理"}},[t._v("#")]),t._v(" "),e("code",[t._v("instanceof")]),t._v("原理")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("function instance_of(leftVaule, rightVaule) { \n    let rightProto = rightVaule.prototype; // 取右表达式的 prototype 值\n    leftVaule = leftVaule.__proto__; // 取左表达式的__proto__值\n    while (true) {\n        if (leftVaule === null) {\n            return false;    \n        }\n        if (leftVaule === rightProto) {\n            return true;    \n        } \n        leftVaule = leftVaule.__proto__ \n    }\n}\n\nfunction Foo1() {}\nfunction Foo2() {}\nFoo1.prototype = new Foo2() {}\nlet f1 = new Foo1()\n\nconsole.log(instance_of(f1, Foo1))    // true\nconsole.log(instance_of(f1, Object))  // true\nconsole.log(instance_of(f1, Foo2))    // true\n\nlet a = []\nlet b = {}\nconsole.log(instance_of(a, Array))    // true\nconsole.log(instance_of(b, Array))    // false\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br"),e("span",{staticClass:"line-number"},[t._v("12")]),e("br"),e("span",{staticClass:"line-number"},[t._v("13")]),e("br"),e("span",{staticClass:"line-number"},[t._v("14")]),e("br"),e("span",{staticClass:"line-number"},[t._v("15")]),e("br"),e("span",{staticClass:"line-number"},[t._v("16")]),e("br"),e("span",{staticClass:"line-number"},[t._v("17")]),e("br"),e("span",{staticClass:"line-number"},[t._v("18")]),e("br"),e("span",{staticClass:"line-number"},[t._v("19")]),e("br"),e("span",{staticClass:"line-number"},[t._v("20")]),e("br"),e("span",{staticClass:"line-number"},[t._v("21")]),e("br"),e("span",{staticClass:"line-number"},[t._v("22")]),e("br"),e("span",{staticClass:"line-number"},[t._v("23")]),e("br"),e("span",{staticClass:"line-number"},[t._v("24")]),e("br"),e("span",{staticClass:"line-number"},[t._v("25")]),e("br"),e("span",{staticClass:"line-number"},[t._v("26")]),e("br"),e("span",{staticClass:"line-number"},[t._v("27")]),e("br")])]),e("p",[t._v("如上代码所示，"),e("code",[t._v("instanceof")]),t._v("主要的实现原理就是右边变量的"),e("code",[t._v("prototype")]),t._v("在左边变量的原型链上即可。因此，"),e("code",[t._v("instanceof")]),t._v("在查找过程中会遍历左边变量的原型链，直到找到右边变量的"),e("code",[t._v("prototype")]),t._v("，如果查找失败，返回false。")]),t._v(" "),e("p",[t._v("为了能更好的了解"),e("code",[t._v("instanceof")]),t._v("原理，可以参考js的原型继承原理，如下图:")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/66f74192a1bf434ea88606d3c7347d79~tplv-k3u1fbpfcp-zoom-1.image",alt:""}})]),t._v(" "),e("h3",{attrs:{id:"object-prototype-tostring-call"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#object-prototype-tostring-call"}},[t._v("#")]),t._v(" Object.prototype.toString.call()")]),t._v(" "),e("p",[t._v("想了解上述的方法，我们可以先了解"),e("code",[t._v("toString()")]),t._v("方法。"),e("code",[t._v("toString()")]),t._v("默认返回一个表示给对象的字符串，通过"),e("code",[t._v("[object type]")]),t._v("的方式来表示。我们可以通过该方法来获取每个对象的类型，并且通过使用"),e("code",[t._v("call()")]),t._v("或 "),e("code",[t._v("apply()")]),t._v("能够获得更为精确的值。如下图：")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3edabedae5a746f4a9748e5d638cee89~tplv-k3u1fbpfcp-zoom-1.image",alt:""}})]),t._v(" "),e("p",[t._v("为什么会发生这种情况呢？原因在于"),e("strong",[t._v("当对象的")]),e("code",[t._v("toString()")]),e("strong",[t._v("方法未被重写时，将会正常返回类型；但是大多数对象都重写了")]),e("code",[t._v("toString()")]),e("strong",[t._v("，这个时候需要用")]),e("code",[t._v("call()")]),e("strong",[t._v("或")]),t._v(" "),e("code",[t._v("Reflext.apply()")]),e("strong",[t._v("来调用。")])]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('// 1.未重写toString()\n({}).toString();     // => "[object Object]"\nMath.toString();     // => "[object Math]"\n\n// 2.重写toString()\nvar x = {\n  toString() {\n    return "X";\n  },\n};\nx.toString();                                     // => "X"\nObject.prototype.toString.call(x);                // => "[object Object]"\n')])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br"),e("span",{staticClass:"line-number"},[t._v("12")]),e("br")])]),e("h4",{attrs:{id:"原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#原理"}},[t._v("#")]),t._v(" 原理")]),t._v(" "),e("p",[t._v("对于 Object.prototype.toString.call(arg)，若参数为 null 或 undefined，直接返回结果。若参数不为"),e("code",[t._v("null")]),t._v("或 "),e("code",[t._v("undefined")]),t._v("，则将参数转为对象，再做判断。")]),t._v(" "),e("p",[t._v("转为对象后，取得该对象的 "),e("code",[t._v("[Symbol.toStringTag]")]),t._v(" 属性值作为 tag，如无该属性，或该属性值不为字符串类型，则依下表取得 tag, 然后返回 "),e("code",[t._v('"[object " + tag + "]"')]),t._v(" 形式的字符串。")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('Object.prototype.toString.call(null);       // => "[object Null]"\n\nObject.prototype.toString.call(undefined);  // => "[object Undefined]"\n\n// Boolean 类型，tag 为 "Boolean"\nObject.prototype.toString.call(true);            // => "[object Boolean]"\n\n// Number 类型，tag 为 "Number"\nObject.prototype.toString.call(1);               // => "[object Number]"\n\n// ...\n')])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br")])]),e("h2",{attrs:{id:"类型转换"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#类型转换"}},[t._v("#")]),t._v(" 类型转换")]),t._v(" "),e("p",[t._v("💡 Tips：类型转换是JS中情况繁杂且容易出错的知识点，列举全部知识点繁多，本文在这里只列举开发中的常见情况。想要深入了解可以参考"),e("a",{attrs:{href:"https://github.com/mqyqingfeng/Blog/issues/159",target:"_blank",rel:"noopener noreferrer"}},[t._v("JavaScript深入之头疼的类型转换（上）"),e("OutboundLink")],1),t._v("，"),e("a",{attrs:{href:"https://github.com/mqyqingfeng/Blog/issues/164",target:"_blank",rel:"noopener noreferrer"}},[t._v("JavaScript深入之头疼的类型转换(下)"),e("OutboundLink")],1),t._v("。")]),t._v(" "),e("p",[t._v("开发中有三种常用的类型转换：转换为 string 类型、转换为 number 类型和转换为 boolean 类型。")]),t._v(" "),e("p",[e("strong",[t._v("字符串转换：")]),t._v(" 发生在输出内容的时候，也可以通过"),e("code",[t._v("String(value)")]),t._v("进行显示转换。")]),t._v(" "),e("p",[e("strong",[t._v("数字型转换：")]),t._v(" 发生在进行算术操作时，也可以通过"),e("code",[t._v("Number(value)")]),t._v("进行显示转换。")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[e("strong",[t._v("值")])]),t._v(" "),e("th",[e("strong",[t._v("转换成")])])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("true/false")]),t._v(" "),e("td",[t._v("1/0")])]),t._v(" "),e("tr",[e("td",[t._v("undefined")]),t._v(" "),e("td",[t._v("NaN")])]),t._v(" "),e("tr",[e("td",[t._v("null")]),t._v(" "),e("td",[t._v("0")])]),t._v(" "),e("tr",[e("td",[t._v("string")]),t._v(" "),e("td",[t._v("“按原样读取”字符串，两端的空格会被忽略。空字符串变成 0。转换出错则输出 NaN。")])])])]),t._v(" "),e("p",[e("strong",[t._v("布尔型转换：")]),t._v(" 发生在进行逻辑操作时，也可以通过"),e("code",[t._v("Boolean(value)")]),t._v("进行显示变换")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[e("strong",[t._v("值")])]),t._v(" "),e("th",[e("strong",[t._v("转换成")])])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("0、null、undefined、NaN、“”")]),t._v(" "),e("td",[t._v("false")])]),t._v(" "),e("tr",[e("td",[t._v("其他值，比如“0”、“ ”")]),t._v(" "),e("td",[t._v("true")])])])]),t._v(" "),e("p",[t._v("关于类型转换暂时就讲述到这里。谢谢大家的阅读！")])])}),[],!1,null,null,null);n.default=s.exports}}]);